# Name of your application. Used to uniquely configure containers.
service: insta_clean

# Name of the container image.
image: toatoko/insta_clean

# Deploy to these servers.
servers:
  web:
    - 16.170.155.182

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
proxy:
  ssl: true
  host: blog-test.website

# Credentials for your image host.
registry:
  username: toatoko
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
  clear:
    # Make sure the DB_HOST matches the accessory service name
    DB_HOST: insta_clean-db
    # Add database configuration
    DATABASE_URL: postgres://insta_clean:0707@insta_clean-db:5432/insta_clean_production

# Aliases
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume
volumes:
  - "insta_clean_storage:/rails/storage"

# Bridge fingerprinted assets
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

ssh:
  user: ubuntu
  keys:
    - /home/toko/Downloads/mamamia.pem

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:17.5
    host: 16.170.155.182
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        POSTGRES_USER: insta_clean
        POSTGRES_DB: insta_clean_production
        # Ensure PostgreSQL allows connections
        POSTGRES_HOST_AUTH_METHOD: md5
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
    # Add health check
    cmd: postgres -c 'shared_preload_libraries=''''' -c 'log_statement=all'
